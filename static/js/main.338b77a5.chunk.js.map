{"version":3,"sources":["style/App.module.css","style/Input.module.css","components/common/Input.tsx","components/common/Button.tsx","components/CounterSetting/CounterSetting.tsx","components/CounterDisplay/CounterDisplay.tsx","store/counterReducer.ts","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","style/counter.module.css"],"names":["module","exports","Input","props","error","title","value","onChange","className","style","error_Input","type","Button","restProps","button","CounterSetting","onmaxValue","onstartValue","onSetValues","useDispatch","useState","setText","useSelector","state","counter","counterStartValue","counterMaxValue","useEffect","counterWrapper","counterDisplay","e","currentTarget","counterBottom","onClick","disabled","CounterDisplay","incButtonHandler","recButtonHandler","text","backToSet","counterIsActive","disableBtn","setDisableBTN","displayAttention","ACTION_TYPES","InitialState","Number","localStorage","getItem","actionCreators","RESET","INCREMENT","UPD_MAX_VALUE","UPD_MIN_VALUE","startValue","SET_VALUES","App","setIsActive","setSetIsActive","dispatch","app","curValue","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyState","newValue","setItem","toString","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.338b77a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__quGKl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error_Input\":\"Input_error_Input__3Wemj\"};","import { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes } from 'react';\r\nimport style from './../../style/Input.module.css'\r\n\r\n\r\ntype PropsInputType =\r\n    DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & {\r\n        value: string | number,\r\n        onChange: (e: ChangeEvent<HTMLInputElement>) => void,\r\n        error?: boolean\r\n    };\r\n\r\nfunction Input(props: PropsInputType) {\r\n\r\n    const { error, title, value, onChange, ...restProps } = props;\r\n\r\n    return (\r\n        <label>\r\n            {title}\r\n            <input className={error ? style.error_Input : ''}\r\n                type='number'\r\n                value={value}\r\n                onChange={onChange} />\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default Input;","import { ButtonHTMLAttributes, DetailedHTMLProps } from 'react';\r\nimport style from './../../style/Button.module.css'\r\n\r\nexport type ReactButtonProps = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    & {\r\n        title: string,\r\n    }\r\n\r\nfunction Button(props: ReactButtonProps) {\r\n\r\n    const { title, ...restProps } = props;\r\n\r\n    return <button className={style.button} {...restProps}>\r\n        {title}\r\n    </button>\r\n}\r\nexport default Button; ","\r\nimport Input from '../common/Input';\r\nimport Button from '../common/Button';\r\nimport { RootStateType } from '../../store/store';\r\nimport style from './../../style/counter.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actionCreators } from '../../store/counterReducer';\r\nimport React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    onmaxValue: (e: string) => void,\r\n    onstartValue: (e: string) => void,\r\n    onSetValues: () => void,\r\n}\r\n\r\nfunction CounterSetting(props: PropsType) {\r\n\r\n    const {onmaxValue, onstartValue, onSetValues} = props\r\n\r\n    const dispatch = useDispatch();\r\n    const [text, setText] = useState('');\r\n    const { counterStartValue, counterMaxValue, value, error } = useSelector((state: RootStateType) => state.counter);\r\n\r\n    useEffect(() => {\r\n        (error) ? setText('Invalid values') : setText('enter values & press \"set\"')\r\n    }, [error]);\r\n\r\n    return (\r\n        <>\r\n            <div className={style.counterWrapper}>\r\n                <div className={style.counterDisplay}>\r\n                    <Input title='max value:'\r\n                        value={counterMaxValue}\r\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => { onmaxValue(e.currentTarget.value) }}\r\n                        error={error} />\r\n                    <Input title='max value:'\r\n                        value={counterStartValue}\r\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => { onstartValue(e.currentTarget.value) }}\r\n                        error={error} />\r\n                </div>\r\n                <div className={style.counterBottom}>\r\n                    <Button title={'SET'}\r\n                        onClick={onSetValues}\r\n                        disabled={error} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CounterSetting; \r\n","\r\nimport React, { useState } from 'react';\r\nimport Button from '../common/Button';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStateType } from '../../store/store';\r\nimport style from './../../style/counter.module.css';\r\n\r\n\r\nexport default function CounterDisplay(props: PropsType) {\r\n\r\n  const { incButtonHandler, recButtonHandler, text, backToSet } = props\r\n  const { counterMaxValue, value, counterIsActive, error } = useSelector((state: RootStateType) => state.counter)\r\n\r\n  const [disableBtn,  setDisableBTN ] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <div className={style.counterWrapper} >\r\n        <div className={(value === counterMaxValue) ? style.displayAttention : style.counterDisplay}>\r\n          {counterIsActive ? value : text}\r\n        </div>\r\n        <div className={style.counterBottom}>\r\n\r\n        <Button title={'SET'}\r\n            onClick={backToSet}\r\n            disabled={(value === counterMaxValue || error || counterIsActive === false ? true : false)} />\r\n\r\n          <Button title={'INC'}\r\n            onClick={incButtonHandler}\r\n            disabled={(value === counterMaxValue || error || counterIsActive === false || disableBtn===true ? true : false)} />\r\n\r\n          <Button title={'RESET'}\r\n            onClick= { () => { recButtonHandler(); setDisableBTN(true) }} \r\n            disabled={(value != counterMaxValue || error || disableBtn===true ? true : false)} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n  text: string,\r\n  incButtonHandler: () => void,\r\n  recButtonHandler: () => void,\r\n  backToSet: () => void;\r\n}\r\n","\r\n\r\nconst InitialState = {\r\n    value: 0,\r\n    error: false,\r\n    counterIsActive: false,\r\n    counterMaxValue: Number(localStorage.getItem(\"maxValue\")) || 1,\r\n    counterStartValue: Number(localStorage.getItem(\"startValue\")) || 0,\r\n}\r\nexport enum ACTION_TYPES {\r\n    RESET = 'RESET',\r\n    INCREMENT = 'INCREMENT',\r\n    SET_VALUES = 'SET_VALUES',\r\n    UPD_MAX_VALUE = 'UPD_MAX_VALUE',\r\n    UPD_MIN_VALUE = 'UPD_MIN_VALUE',\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = InitialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ACTION_TYPES.RESET: {\r\n            let copyState = { ...state }\r\n            copyState.value = 0\r\n            return copyState\r\n        };\r\n\r\n        case ACTION_TYPES.INCREMENT:\r\n            let newValue = +state.value;\r\n            return {\r\n                ...state,\r\n                value: newValue + 1\r\n            };\r\n\r\n        case ACTION_TYPES.UPD_MAX_VALUE: {\r\n            let copyState = { ...state }\r\n            if ((action.value <= state.counterStartValue) || action.value <= 0) {\r\n                copyState.error = true;\r\n                copyState.counterIsActive = false;\r\n            } else copyState.error = false;\r\n            return {\r\n                ...copyState,\r\n                counterMaxValue: action.value,\r\n            }\r\n        };\r\n\r\n        case ACTION_TYPES.UPD_MIN_VALUE: {\r\n            let copyState = { ...state }\r\n            if ((action.value >= state.counterMaxValue) || action.value < 0) {\r\n                copyState.error = true;\r\n                copyState.counterIsActive = false;\r\n            } else copyState.error = false;\r\n            return {\r\n                ...copyState,\r\n                counterStartValue: action.value,\r\n            }\r\n        };\r\n\r\n        case ACTION_TYPES.SET_VALUES:\r\n            let copyState = { ...state };\r\n            copyState.value = action.startValue;\r\n            localStorage.setItem('maxValue', state.counterMaxValue.toString());\r\n            localStorage.setItem('startValue', state.counterStartValue.toString());\r\n            return {\r\n                ...copyState,\r\n                counterIsActive: true\r\n            };\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actionCreators = {\r\n    ResetAC: () => ({ type: ACTION_TYPES.RESET } as const),\r\n    IncrementAC: () => ({ type: ACTION_TYPES.INCREMENT } as const),\r\n    UpdMaxValueAC: (value: number) => ({ type: ACTION_TYPES.UPD_MAX_VALUE, value } as const),\r\n    UpdMinValueAC: (value: number) => ({ type: ACTION_TYPES.UPD_MIN_VALUE, value } as const),\r\n    SetValuesAC: (startValue: number) => ({ type: ACTION_TYPES.SET_VALUES, startValue } as const),\r\n}\r\n\r\n//types\r\nexport type InitialStateType = {\r\n    error: boolean,\r\n    value: number | string,\r\n    counterMaxValue: number,\r\n    counterIsActive: boolean,\r\n    counterStartValue: number,\r\n}\r\n\r\nexport type ActionTypes =\r\n    | ReturnType<typeof actionCreators.ResetAC>\r\n    | ReturnType<typeof actionCreators.SetValuesAC>\r\n    | ReturnType<typeof actionCreators.IncrementAC>\r\n    | ReturnType<typeof actionCreators.UpdMaxValueAC>\r\n    | ReturnType<typeof actionCreators.UpdMinValueAC>\r\n","import React, { useEffect, useState } from 'react';\nimport style from './style/App.module.css';\n\nimport CounterSetting from './components/CounterSetting/CounterSetting';\nimport CounterDisplay from './components/CounterDisplay/CounterDisplay';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actionCreators } from './store/counterReducer';\nimport { RootStateType } from './store/store';\n\n\n\nfunction App() {\n\n  const [setIsActive, setSetIsActive] = useState(true);\n\n\n  const dispatch = useDispatch();\n  const [text, setText] = useState('');\n  const { counterStartValue, counterMaxValue, value, error } = useSelector((state: RootStateType) => state.counter);\n\n  useEffect(() => {\n    (error) ? setText('Invalid values') : setText('enter values & press \"set\"')\n  }, [error]);\n\n  function onmaxValue(curValue: string) {\n    dispatch(actionCreators.UpdMaxValueAC(Number(curValue)));\n  };\n\n  function onstartValue(curValue: string) {\n    dispatch(actionCreators.UpdMinValueAC(Number(curValue)));\n  };\n\n  const onSetValues = () => {\n    let value = counterStartValue;\n    dispatch(actionCreators.SetValuesAC(value));\n    setSetIsActive(false);\n  };\n\n\n  const incButtonHandler = () => {\n    dispatch(actionCreators.IncrementAC())\n    console.log('increment tab')\n  };\n\n  const recButtonHandler = () => {\n    dispatch(actionCreators.ResetAC())\n    console.log('reset tab')\n  };\n\n  const backToSet = () => {\n    setSetIsActive(true)\n  }\n\n  return (\n    <div className={style.app}>\n      { (setIsActive === true) &&\n        <CounterSetting onmaxValue={onmaxValue}\n          onstartValue={onstartValue}\n          onSetValues={onSetValues}\n        />\n      }\n      { (setIsActive === false) &&\n\n        <CounterDisplay text={text}\n          backToSet={backToSet}\n          incButtonHandler={incButtonHandler}\n          recButtonHandler={recButtonHandler}\n        />\n      }\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore, combineReducers} from 'redux';\r\nimport { counterReducer } from './counterReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n });\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>;\r\n\r\n // @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"counter_counterWrapper__12OHa\",\"counterDisplay\":\"counter_counterDisplay__28-ZP\",\"displayAttention\":\"counter_displayAttention__2Cg3D\",\"error_Input\":\"counter_error_Input__L5Hpe\",\"counterBottom\":\"counter_counterBottom__1Pfnf\"};"],"sourceRoot":""}